{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResponsiveScreenFontSize = exports.useResponsiveScreenWidth = exports.useResponsiveScreenHeight = exports.useResponsiveFontSize = exports.useResponsiveWidth = exports.useResponsiveHeight = exports.responsiveScreenFontSize = exports.responsiveScreenWidth = exports.responsiveScreenHeight = exports.responsiveFontSize = exports.responsiveWidth = exports.responsiveHeight = exports.useDimensionsChange = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar useDimensionsListener = function useDimensionsListener() {\n  var _useState = (0, _react.useState)(_reactNative.Dimensions.get(\"screen\")),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      screenDimension = _useState2[0],\n      setScreenDimension = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(_reactNative.Dimensions.get(\"window\")),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      windowDimension = _useState4[0],\n      setWindowDimension = _useState4[1];\n\n  (0, _react.useEffect)(function () {\n    function handleDimensionChange(_ref) {\n      var window = _ref.window,\n          screen = _ref.screen;\n      setWindowDimension(window);\n      setScreenDimension(screen);\n    }\n\n    _reactNative.Dimensions.addEventListener(\"change\", handleDimensionChange);\n\n    return function () {\n      _reactNative.Dimensions.removeEventListener(\"change\", handleDimensionChange);\n    };\n  }, []);\n  return {\n    screen: screenDimension,\n    window: windowDimension\n  };\n};\n\nvar percentageCalculation = function percentageCalculation(max, val) {\n  return max * (val / 100);\n};\n\nvar fontCalculation = function fontCalculation(height, width, val) {\n  var widthDimension = height > width ? width : height;\n  var aspectRatioBasedHeight = 16 / 9 * widthDimension;\n  return percentageCalculation(Math.sqrt(Math.pow(aspectRatioBasedHeight, 2) + Math.pow(widthDimension, 2)), val);\n};\n\nvar useDimensionsChange = function useDimensionsChange(effect) {\n  var hasMountRef = (0, _react.useRef)(false);\n  var dimensions = useDimensionsListener();\n  (0, _react.useEffect)(function () {\n    if (hasMountRef.current) {\n      var destroy = effect(dimensions);\n\n      var cleanUp = function cleanUp() {\n        return null;\n      };\n\n      if (typeof destroy === \"function\") {\n        cleanUp = destroy;\n      }\n\n      return function () {\n        return cleanUp();\n      };\n    } else {\n      hasMountRef.current = true;\n    }\n  }, [dimensions, effect]);\n};\n\nexports.useDimensionsChange = useDimensionsChange;\n\nvar responsiveHeight = function responsiveHeight(h) {\n  var _Dimensions$get = _reactNative.Dimensions.get(\"window\"),\n      height = _Dimensions$get.height;\n\n  return percentageCalculation(height, h);\n};\n\nexports.responsiveHeight = responsiveHeight;\n\nvar responsiveWidth = function responsiveWidth(w) {\n  var _Dimensions$get2 = _reactNative.Dimensions.get(\"window\"),\n      width = _Dimensions$get2.width;\n\n  return percentageCalculation(width, w);\n};\n\nexports.responsiveWidth = responsiveWidth;\n\nvar responsiveFontSize = function responsiveFontSize(f) {\n  var _Dimensions$get3 = _reactNative.Dimensions.get(\"window\"),\n      height = _Dimensions$get3.height,\n      width = _Dimensions$get3.width;\n\n  return fontCalculation(height, width, f);\n};\n\nexports.responsiveFontSize = responsiveFontSize;\n\nvar responsiveScreenHeight = function responsiveScreenHeight(h) {\n  var _Dimensions$get4 = _reactNative.Dimensions.get(\"screen\"),\n      height = _Dimensions$get4.height;\n\n  return percentageCalculation(height, h);\n};\n\nexports.responsiveScreenHeight = responsiveScreenHeight;\n\nvar responsiveScreenWidth = function responsiveScreenWidth(w) {\n  var _Dimensions$get5 = _reactNative.Dimensions.get(\"screen\"),\n      width = _Dimensions$get5.width;\n\n  return percentageCalculation(width, w);\n};\n\nexports.responsiveScreenWidth = responsiveScreenWidth;\n\nvar responsiveScreenFontSize = function responsiveScreenFontSize(f) {\n  var _Dimensions$get6 = _reactNative.Dimensions.get(\"screen\"),\n      height = _Dimensions$get6.height,\n      width = _Dimensions$get6.width;\n\n  return fontCalculation(height, width, f);\n};\n\nexports.responsiveScreenFontSize = responsiveScreenFontSize;\n\nvar useResponsiveHeight = function useResponsiveHeight(h) {\n  var height = useDimensionsListener().window.height;\n  return percentageCalculation(height, h);\n};\n\nexports.useResponsiveHeight = useResponsiveHeight;\n\nvar useResponsiveWidth = function useResponsiveWidth(w) {\n  var width = useDimensionsListener().window.width;\n  return percentageCalculation(width, w);\n};\n\nexports.useResponsiveWidth = useResponsiveWidth;\n\nvar useResponsiveFontSize = function useResponsiveFontSize(f) {\n  var _useDimensionsListene = useDimensionsListener().window,\n      height = _useDimensionsListene.height,\n      width = _useDimensionsListene.width;\n  return fontCalculation(height, width, f);\n};\n\nexports.useResponsiveFontSize = useResponsiveFontSize;\n\nvar useResponsiveScreenHeight = function useResponsiveScreenHeight(h) {\n  var height = useDimensionsListener().screen.height;\n  return percentageCalculation(height, h);\n};\n\nexports.useResponsiveScreenHeight = useResponsiveScreenHeight;\n\nvar useResponsiveScreenWidth = function useResponsiveScreenWidth(w) {\n  var width = useDimensionsListener().screen.width;\n  return percentageCalculation(width, w);\n};\n\nexports.useResponsiveScreenWidth = useResponsiveScreenWidth;\n\nvar useResponsiveScreenFontSize = function useResponsiveScreenFontSize(f) {\n  var _useDimensionsListene2 = useDimensionsListener().screen,\n      height = _useDimensionsListene2.height,\n      width = _useDimensionsListene2.width;\n  return fontCalculation(height, width, f);\n};\n\nexports.useResponsiveScreenFontSize = useResponsiveScreenFontSize;","map":{"version":3,"sources":["index.ts"],"names":["useDimensionsListener","screenDimension","setScreenDimension","Dimensions","windowDimension","setWindowDimension","window","screen","percentageCalculation","max","val","fontCalculation","widthDimension","height","aspectRatioBasedHeight","Math","useDimensionsChange","hasMountRef","dimensions","destroy","effect","cleanUp","responsiveHeight","responsiveWidth","width","responsiveFontSize","responsiveScreenHeight","responsiveScreenWidth","responsiveScreenFontSize","useResponsiveHeight","useResponsiveWidth","useResponsiveFontSize","useResponsiveScreenHeight","useResponsiveScreenWidth","useResponsiveScreenFontSize"],"mappings":"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","sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { Dimensions, ScaledSize } from \"react-native\";\n\nconst useDimensionsListener = () => {\n  const [screenDimension, setScreenDimension] = useState(\n    Dimensions.get(\"screen\")\n  );\n  const [windowDimension, setWindowDimension] = useState(\n    Dimensions.get(\"window\")\n  );\n\n  useEffect(() => {\n    function handleDimensionChange({\n      window,\n      screen\n    }: {\n      window: ScaledSize;\n      screen: ScaledSize;\n    }) {\n      setWindowDimension(window);\n      setScreenDimension(screen);\n    }\n\n    Dimensions.addEventListener(\"change\", handleDimensionChange);\n    return () => {\n      Dimensions.removeEventListener(\"change\", handleDimensionChange);\n    };\n  }, []);\n\n  return {\n    screen: screenDimension,\n    window: windowDimension\n  };\n};\n\ntype EffectParams = {\n  screen: ScaledSize;\n  window: ScaledSize;\n};\n\ntype EffectCallback =\n  | ((opts: EffectParams) => () => any)\n  | ((opts: EffectParams) => undefined)\n  | ((opts: EffectParams) => void);\n\nconst percentageCalculation = (max: number, val: number) => max * (val / 100);\n\nconst fontCalculation = (height: number, width: number, val: number) => {\n  const widthDimension = height > width ? width : height;\n  const aspectRatioBasedHeight = (16 / 9) * widthDimension;\n  return percentageCalculation(\n    Math.sqrt(\n      Math.pow(aspectRatioBasedHeight, 2) + Math.pow(widthDimension, 2)\n    ),\n    val\n  );\n};\n\nexport const useDimensionsChange = (effect: EffectCallback) => {\n  const hasMountRef = useRef(false);\n  const dimensions = useDimensionsListener();\n\n  useEffect(() => {\n    if (hasMountRef.current) {\n      const destroy = effect(dimensions);\n      let cleanUp: any = () => null;\n      if (typeof destroy === \"function\") {\n        cleanUp = destroy;\n      }\n      return () => cleanUp();\n    } else {\n      hasMountRef.current = true;\n    }\n  }, [dimensions, effect]);\n};\n\nexport const responsiveHeight = (h: number) => {\n  const { height } = Dimensions.get(\"window\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveWidth = (w: number) => {\n  const { width } = Dimensions.get(\"window\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"window\");\n  return fontCalculation(height, width, f);\n};\n\nexport const responsiveScreenHeight = (h: number) => {\n  const { height } = Dimensions.get(\"screen\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveScreenWidth = (w: number) => {\n  const { width } = Dimensions.get(\"screen\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveScreenFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"screen\");\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveHeight = (h: number) => {\n  const { height } = useDimensionsListener().window;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveWidth = (w: number) => {\n  const { width } = useDimensionsListener().window;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().window;\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveScreenHeight = (h: number) => {\n  const { height } = useDimensionsListener().screen;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveScreenWidth = (w: number) => {\n  const { width } = useDimensionsListener().screen;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveScreenFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().screen;\n  return fontCalculation(height, width, f);\n};\n"]},"metadata":{},"sourceType":"script"}